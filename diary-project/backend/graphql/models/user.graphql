extend type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

     me: User! @auth(guards: ["sanctum"])
}

extend type Mutation {
  register(input:RegisterInput! @spread):AuthPayload @field(resolver:"App\\GraphQL\\Mutations\\AuthResolver@register")
  login(input:LoginInput! @spread):AuthPayload @field(resolver:"App\\GraphQL\\Mutations\\AuthResolver@login")
  logout:Logout! @field(resolver:"App\\GraphQL\\Mutations\\AuthResolver@logout")
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    profile_image: String

    diaries: [Diary!]! @hasMany(defaultCount: 10,type: PAGINATOR)

    favorites: [Favorite!]! @hasMany(type: PAGINATOR)

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type AuthPayload {
  user:User
  token:String
}

type Logout{
  status:Boolean!
  user:User
}
input RegisterInput {
  name: String! @rules(apply: ["required", "max:255"])
  email: String! @rules(apply: ["required", "email","unique:users,email"])
  password: String! @rules(apply: ["required", "min:8"])
}

input LoginInput {
  email: String! @rules(apply: ["required"])
  password: String! @rules(apply: ["required", "min:8"])
}

